1. 인터페이스의 이해
객체지향 언어를 접하면서 '인터페이스'는 중요한, 쉽지 않는 개념입니다.

여기서 '쉽지 않다'라는 의미는 인터페이스 문법을 습득하는 것에 어려움이 있다는 것이 아니고, 인터페이스를 개발 중인 프로그래밍에 어떻게 접목시켜야 할지 고민이 많이 된다는 것입니다. 문법은 쉽습니다.

오늘 수업을 통해 인터페이스를 완전히 이해하고, 실제 프로젝트에 적용한다는 것은 어렵습니다. 이번 수업을 통해서 인터페이스의 문법을 이해하고, 여러 가지 패턴을 통해 인터페이스를 공부한다면 이해에 도움이 될 것입니다. 시간이 지나면서 인터페이스를 내 소스에 녹여낼 수 있을 것입니다.
그리고, 실무에서 규모가 어느 정도 큰 프로젝트를 하게 된다면, 인터페이스의 필요성에 대해서 완전히 이해를 하게 될 것입니다. (수업 중에 하게 되는 짧은 예제에서는 인터페이스의 필요성을 거의 느끼지 못할 수도 있을 것입니다)


인터페이스 안에는 public 상수와 추상 메소드만 사용 가능하다.
public /* static final */ int CONSTANT_NUM = 10; 
	public /* abstract */ void mothod1();

그래서 static final 과 abstract 를 생략해도 된다.

Class 는 하나의 상속밖에 못받지만, Interface는 다중구현이 가능.

⑴ 'class'대신 'interface' 예약어를 사용한다는 점에서 클래스와 유사
  ⑵ 실제 구현된 기능 없이 추상메소드와 상수만이 존재
	public interface 인터페이스이름 {
		public static final 타입 상수이름 = 값;
		public abstract 메서드 이름(매개변수 목록);  //구현된 메소드는 가질 수 없다
	}
	☞모든 멤버변수는 public static final이어야하며 이를 생략할 수 있다.'
	  모든 메서드는 public abstract 이어야 하며, 이를 생략할 수 있다.
  ⑵ private는 불가  - 상수나 메소드를 만들 때 private 접근 제한자는 불가
⑶ 변수 타입 - 인터페이스는 객체를 생성할 수 없다. 다만, 변수 타입으로만 사용 됩니다.
		(예외, 익명 구현 객체만이 가능은 하다. 안드로이드에서 주로)
  ⑷ 구현은 Implement 되는 클래스에서 합니다.


interface 에서 
public default void mute();

default 메소드를 쓰면 일반메소드같이 활용할 수 있다.(1.8ver 이상에서만 작동)



instanceof  (변수의 객체 타입을 알아보는것. 객체 타입 or 인스턴스 타입이라고 부른다)

Scanner 로직 중 .next() 는 String 을 받는다.
.nextInt() 는 숫자.

