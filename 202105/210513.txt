자주 쓰는것을 모아서 다른 자바파일에 보관하고 꺼내쓴다.
객체지향

return 은 1개만 돌려보낼 수 있다.

return 이 없는 메소드 만들기

ex) 라인 출력 메소드

재귀호출 = 내가 나를 다시 호출하는것.
ex)
	private static long factorial(int su) {
		if(su == 1) {
			return 1;
		}else {
			return su * factorial(su - 1);
		}

 4. 오늘의 문제 : 사용자로부터 원하는 단수(2~9) 구구단을 출력하는 프로그램을 구현하시오.
	(단, 단수를 매개변수로 받아 해당 단수의 구구단을 출력하는 부분을 method로 처리한다. 사용자가 2~9 사이의 수가 아닌 수를 입력할 시 2~9사이의 수를 입력할 때까지 계속 입력 받는다.)
사용 : do while
풀어보기.
메소드를 만들면 (return이 필요없는 void일 경우)
System.out.println() 안에 안넣어도 실행이 된다.

ex)	private static void mul(int su) {
		for(int i = 1; i < 10; i++) {
			System.out.println(su + "*" + i + "=" + su * i);
		}
		
	}
 mul(numFirst); 

만으로 출력이된다.

클래스와 객체의 개념을 알고 구분을 무조건 해야된다.

객체 = object,
클래스 (설계도) 객체 (클래스로부터 생성됨, 하나의 클래스로 무한한 객체를 생성가능)

Car myPorsche = new Car(); 

new 를 사용할 경우 값을 초기화시킨다.( 0 , null )

private 를 access 할수있는 명령어를 만든다.
setter, getter.

this.aa  < 매우중요

지역변수 aa가 존재하더라도 내 객체의 aa를 가르킨다.

setter 와 getter

ex)
myPorsche.setColor("빨강");     바꿀것을 괄호안에
myPorsche.getColor();      가져오는건 setter 에 설정되어있으니 빈괄호만

패키지명 , 클래스명 , 데이터 , 생성자함수 , 메소드 , setter , getter 가 완벽한 클래스의 모습


public Square() {      //생성자 함수 : return 타입이 없다. 반드시 클래스 명이랑 같아야한다.


ctrl + shift + O = 사용된것을 모두 import 한다.

